#!/bin/sh
# Copyright (C) 2002-2005 Flavio Stanchina
# Copyright (C) 2005-2006 Aric Cyr
# Copyright (C) 2007 Mario Limonciello
# Copyright (C) 2009 Alberto Milone

set -e

NAME=$1
VERSION=$2
ARCH=$3
UPGRADE=$4

if [ -z "$NAME" ] || [ -z "$VERSION" ] || [ -z "$ARCH" ]; then
    echo "Need NAME, VERSION, and ARCH defined"
    exit 1
fi

KERNELS=$(ls /lib/modules/)
CURRENT_KERNEL=$(uname -r)

#We never want to keep an older version side by side to prevent conflicts
if [ -e "/var/lib/dkms/$NAME/$VERSION" ]; then
    echo "Removing old $NAME-$VERSION DKMS files..."
    dkms remove -m $NAME -v $VERSION --all
fi

#Load new files, either by source package or by tarball
echo "Loading new $NAME-$VERSION DKMS files..."
if [ -f "/usr/src/$NAME-$VERSION.dkms.tar.gz" ]; then
    dkms ldtarball --archive "/usr/src/$NAME-$VERSION.dkms.tar.gz"
else
    dkms add -m $NAME -v $VERSION > /dev/null
fi

# On 1st installation, let us look for a directory
# in /lib/modules which matches `uname -r`. If none
# is found it is possible that buildd is being used
# and that uname -r is giving us the name of the
# kernel used by the buildd machine.
# 
# If this is the case we try to build the kernel
# module for each kernel which has a directory in 
# /lib/modules. Furthermore we will have to tell 
# DKMS which architecture it should build the module
# for (e.g. if the buildd machine is using a
# 2.6.24-23-xen 64bit kernel).
#
# NOTE: if the headers are not installed then the
#       module won't be built, as usual
if [ -z "$3" ]; then
    echo "First Installation: checking all kernels..."
    for KERNEL in $KERNELS; do
        if [ ${KERNEL} = ${CURRENT_KERNEL} ]; then
            # Kernel found
            KERNELS=$CURRENT_KERNEL
            break
        fi
    done
else
    KERNELS=$CURRENT_KERNEL
fi

for KERNEL in $KERNELS; do
    dkms_status=`dkms status -m $NAME -v $VERSION -k $KERNEL -a $ARCH`
    if [ `echo $KERNEL | grep -c "BOOT"` -gt 0 ]; then
	echo -e ""
	echo -e "Module build and install for $KERNEL was skipped as 
	echo -e "it is a BOOT variant"
	continue	
    fi

    #if the module isn't yet built, try to build it
    if [ `echo $dkms_status | grep -c ": built"` -eq 0 ]; then
	if [ -e /lib/modules/$KERNEL/build/include ]; then
        	echo -e "Building initial module for $KERNEL, architecture $ARCH"
        	dkms build -m $NAME -v $VERSION -k $KERNEL -a $ARCH > /dev/null
        	echo -e "Done."
	else
                echo -e "Module build for the currently running kernel was skipped since the"
                echo -e "kernel source for this kernel does not seem to be installed."
	fi
    fi

    #if the module is built (either pre-built or just now), install it
    if [ `echo $dkms_status | grep -c ": built"` -eq 1 ] && 
       [ `echo $dkms_status | grep -c ": installed"` -eq 0 ]; then
        dkms install -m $NAME -v $VERSION -k $KERNEL -a $ARCH
    fi
done
